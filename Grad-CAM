import os
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
import cv2
from PIL import Image
from tensorflow.keras.preprocessing import image
from tensorflow.keras.models import load_model
from sklearn.preprocessing import LabelEncoder
from collections import defaultdict, Counter

# saved densenet model
MODEL_PATH = "my_densenet_model_80/20.h5"

DATASET_PATH = r"C:\Users\farve\OneDrive\Downloads\archive\plantvillage dataset\color"
IMG_SIZE = (224, 224)
MAX_PER_LABEL = 10  # Number of Grad-CAM images per misclassified label


model = load_model(MODEL_PATH)
print("Model loaded successfully.")

# load image paths and labels
def list_image_paths_and_labels(root_dir):
    paths = []
    labels = []
    for class_name in os.listdir(root_dir):
        class_dir = os.path.join(root_dir, class_name)
        if os.path.isdir(class_dir):
            for fname in os.listdir(class_dir):
                if fname.lower().endswith(('.png', '.jpg', '.jpeg')):
                    paths.append(os.path.join(class_dir, fname))
                    labels.append(class_name)
    return np.array(paths), np.array(labels)

paths, labels_str = list_image_paths_and_labels(DATASET_PATH)

# encode label
label_encoder = LabelEncoder()
labels = label_encoder.fit_transform(labels_str)

# function to preprocess the image for model prediction
def preprocess_image(img_path):
    img = image.load_img(img_path, target_size=IMG_SIZE)
    img_array = image.img_to_array(img) / 255.0
    return np.expand_dims(img_array, axis=0), img


# dictionary to store misclassified images grouped by true label
misclassified_by_label = defaultdict(list)

# loop through images and check for misclassifications
for i, path in enumerate(paths):
    img_array, original_img = preprocess_image(path)
    prediction = model.predict(img_array, verbose=0)
    predicted_class = np.argmax(prediction)
    true_class = labels[i]

    if predicted_class != true_class:
        true_label = label_encoder.classes_[true_class]
        misclassified_by_label[true_label].append((path, true_class, predicted_class, original_img))


# sort labels by most misclassified
sorted_labels = sorted(misclassified_by_label.items(), key=lambda x: len(x[1]), reverse=True)

print(" Misclassification counts per label:")
for label, items in sorted_labels:
    print(f"  {label}: {len(items)}")

# gradcam setup
last_conv_layer_name = "conv5_block16_concat"  # For DenseNet121
grad_model = tf.keras.models.Model(
    [model.inputs],
    [model.get_layer(last_conv_layer_name).output, model.output]
)

# function to compute Gradcam heatmap
def make_gradcam_heatmap(img_array, class_idx):
    with tf.GradientTape() as tape:
        conv_outputs, predictions = grad_model(img_array)
        loss = predictions[:, class_idx]
    grads = tape.gradient(loss, conv_outputs)
    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))
    heatmap = tf.reduce_mean(tf.multiply(pooled_grads, conv_outputs), axis=-1)[0]
    heatmap = np.maximum(heatmap, 0)
    return heatmap / np.max(heatmap)

# display visualisation
for label, samples in sorted_labels:
    print(f"\n Visualizing top misclassified label: {label}")
    for idx, (path, true_idx, pred_idx, original_img) in enumerate(samples[:MAX_PER_LABEL]):
        img_array, _ = preprocess_image(path)
        heatmap = make_gradcam_heatmap(img_array, pred_idx)
        heatmap_resized = cv2.resize(heatmap, IMG_SIZE)
        heatmap_color = cv2.applyColorMap(np.uint8(255 * heatmap_resized), cv2.COLORMAP_JET)

        # load original image using opencv for overlay
        img_cv2 = cv2.imread(path)
        img_cv2 = cv2.resize(img_cv2, IMG_SIZE)

        # overlay heatmap 
        superimposed_img = cv2.addWeighted(img_cv2, 0.6, heatmap_color, 0.4, 0)

        plt.figure(figsize=(12, 4))
        plt.suptitle(f"True: {label_encoder.classes_[true_idx]}, Predicted: {label_encoder.classes_[pred_idx]}")
        plt.subplot(1, 3, 1)
        plt.imshow(original_img)
        plt.title("Original")
        plt.axis("off")

        plt.subplot(1, 3, 2)
        plt.imshow(heatmap_resized, cmap='jet')
        plt.title("Grad-CAM Heatmap")
        plt.axis("off")

        plt.subplot(1, 3, 3)
        plt.imshow(cv2.cvtColor(superimposed_img, cv2.COLOR_BGR2RGB))
        plt.title("Superimposed")
        plt.axis("off")
        plt.tight_layout()
        plt.show()
